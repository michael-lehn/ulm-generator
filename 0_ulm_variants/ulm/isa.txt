# Description of the hardware
# NUM_REGISTERS: 256

# For the description of the assembly notation
# LPAREN_MEM: (
# REGISTER_TOKEN: %

#
# Fmt	{(Field Type Size)}
#
# First Field is used as opCode and is required to have some fixed size and type
#
E	(OP u  8)
J26	(OP u  8) (XYZ	j  24)
S16R    (OP u  8) (XY   s  16)	(Z  u  8)
U16R    (OP u  8) (XY	u  16)	(Z  u  8)
R       (OP u  8) (X	u   8)
U       (OP u  8) (X	u   8)
RR      (OP u  8) (X	u   8)	(Y  u  8) 
RRR     (OP u  8) (X	u   8)	(Y  u  8) (Z u  8)
SRR     (OP u  8) (X	s   8)	(Y  u  8) (Z u  8)
URR     (OP u  8) (X	u   8)	(Y  u  8) (Z u  8)
R_MRR   (OP u  8) (X	u   8)	(Y  u  8) (Z u  8)
R_MSR   (OP u  8) (X	u   8)	(Y  s  8) (Z u  8)
MRR_R   (OP u  8) (X	u   8)	(Y  u  8) (Z u  8)
MSR_R   (OP u  8) (X	s   8)	(Y  u  8) (Z u  8)

#
# Opcode [Fmt]
# : Assembly notatation
#     Code block

0x06 RRR
:   hm3Add X, %Y,   %Z
    ulm_add64(X*3, ulm_regVal(Y), Z);

#-------------------------------------------------------------------------------

0x30 RRR
#   Adds register X with register Y. Stores the result in register Z.
:   addq    %X, %Y, %Z
    ulm_add64(ulm_regVal(X), ulm_regVal(Y), Z);

0x38 URR
#   Adds the unsigned immediate value X with the unsigned integer %Y. Stores
#   the result in %Z. Updates the status flags.
:   addq    X,  %Y, %Z
    ulm_add64(X, ulm_regVal(Y), Z);


@addq
# Integer addition.
# Adds either the content of register X or the unsigend immediate value X to
# register Y. The result is stored in register Z.

#-------------------------------------------------------------------------------

0x37 RRR
:   adcq    %X, %Y, %Z
    ulm_add64(ulm_regVal(X) + ulm_statusReg[ULM_ZF], ulm_regVal(Y), Z);

#-------------------------------------------------------------------------------

0x51 RRR
:   andq    %X,    %Y,    %Z
    ulm_and64(ulm_regVal(X), ulm_regVal(Y), Z);

#-------------------------------------------------------------------------------

0x33 RRR
:   divq    %X,    %Y,    %Z
    ulm_div128(ulm_regVal(X), ulm_regVal(Y), ulm_regVal(Y + 1),
	       Z, Z + 1, Z + 2);
0x3B URR
:   divq    X,	    %Y,    %Z
    ulm_div128(X, ulm_regVal(Y), ulm_regVal(Y + 1), Z, Z + 1, Z + 2);

#-------------------------------------------------------------------------------

0x60 R
:   getc    %X
    ulm_setReg(ulm_readChar() & 0xFF, X);

#-------------------------------------------------------------------------------
    
0x01 R
:   halt    %X
    ulm_halt(ulm_regVal(X));
0x09 U
:   halt    X
    ulm_halt(X);

#-------------------------------------------------------------------------------

0x35 RRR
:   idivq   %X, %Y, %Z
    ulm_idiv64(ulm_regVal(X), ulm_regVal(Y), Z);
0x3D URR
:   idivq   X, %Y, %Z
    ulm_idiv64(X, ulm_regVal(Y), Z);

#-------------------------------------------------------------------------------

0x34 RRR
:   imulq   %X, %Y, %Z
    ulm_mul64(ulm_regVal(X), ulm_regVal(Y), Z);
0x3C SRR
:   imulq   X, %Y, %Z
    ulm_mul64(X, ulm_regVal(Y), Z);

#-------------------------------------------------------------------------------

0x4B J26
:   ja	    XYZ
:   jnbe    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_CF] == 0 &&
			   ulm_statusReg[ULM_ZF] == 0,
			   XYZ);
#-------------------------------------------------------------------------------

0x49 J26
:   jae	    XYZ
:   jnb	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_CF] == 0, XYZ);

#-------------------------------------------------------------------------------

0x48 J26
:   jb	    XYZ
:   jnae    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_CF] == 1, XYZ);

#-------------------------------------------------------------------------------

0x4A J26
:   jna	    XYZ
:   jbe	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_CF] == 1 ||
			   ulm_statusReg[ULM_ZF] == 1,
			   XYZ);

#-------------------------------------------------------------------------------

0x42 J26
:   jz	    XYZ
:   je	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_ZF] == 1, XYZ);

#-------------------------------------------------------------------------------

0x47 J26
:   jg	    XYZ
:   jnle    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_ZF] == 0 &&
			   ulm_statusReg[ULM_SF] == ulm_statusReg[ULM_OF],
			   XYZ);

#-------------------------------------------------------------------------------

0x45 J26
:   jge	    XYZ
:   jnl	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_SF] == ulm_statusReg[ULM_OF],
			   XYZ);

#-------------------------------------------------------------------------------

0x44 J26
:   jnge    XYZ
:   jl	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_SF] != ulm_statusReg[ULM_OF],
			   XYZ);

#-------------------------------------------------------------------------------

0x46 J26
:   jng	    XYZ
:   jle	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_ZF] == 1 ||
			   ulm_statusReg[ULM_SF] != ulm_statusReg[ULM_OF],
			   XYZ);

#-------------------------------------------------------------------------------

0x40 RR
:   jmp	    %X,	    %Y
    ulm_absJump(ulm_regVal(X), Y);
0x41 J26
:   jmp	    XYZ
    ulm_unconditionalRelJump(XYZ);

#-------------------------------------------------------------------------------

0x43 J26
:   jne	    XYZ
:   jnz	    XYZ
    ulm_conditionalRelJump(ulm_statusReg[ULM_ZF] == 0, XYZ);

#-------------------------------------------------------------------------------

0x57 S16R
:   ldswq   XY, %Z
    ulm_setReg(XY, Z);

@ldswq
# Load a signed word into a register

#-------------------------------------------------------------------------------

0x56 U16R
:   ldzwq   XY, %Z
    ulm_setReg(XY, Z);

@ldzwq
# Load a unsigned word into a register

#-------------------------------------------------------------------------------

0x23 R_MRR
:   movb    %X, (%Y, %Z)
    ulm_store64(0, Y, Z, 1, 1, X);

0x2B R_MSR
:   movb    %X, Y(%Z)
:   movb    %X, (%Z)
    ulm_store64(Y, Z, 0, 1, 1, X);

0x93 R_MRR
:   movb    %X, (%Y, %Z, 2)
    ulm_store64(0, Y, Z, 2, 1, X);

0xB3 R_MRR
:   movb    %X, (%Y, %Z, 4)
    ulm_store64(0, Y, Z, 4, 1, X);

0xD3 R_MRR
:   movb    %X, (%Y, %Z, 8)
    ulm_store64(0, Y, Z, 8, 1, X);

0x21 R_MRR
:   movl    %X, (%Y, %Z)
    ulm_store64(0, Y, Z, 1, 4, X);

0x29 R_MSR
:   movl    %X, Y(%Z)
:   movl    %X, (%Z)
    ulm_store64(Y, Z, 0, 1, 4, X);

0x91 R_MRR
:   movl    %X, (%Y, %Z, 2)
    ulm_store64(0, Y, Z, 2, 4, X);

0xB1 R_MRR
:   movl    %X, (%Y, %Z, 4)
    ulm_store64(0, Y, Z, 4, 4, X);

0xD1 R_MRR
:   movl    %X, (%Y, %Z, 8)
    ulm_store64(0, Y, Z, 8, 4, X);

0x10 MRR_R
:   movq    (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_ZERO_EXT, 8, Z);

0x18 MSR_R
:   movq    X(%Y), %Z
:   movq    (%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_ZERO_EXT, 8, Z);

0x20 R_MRR
:   movq    %X, (%Y, %Z)
    ulm_store64(0, Y, Z, 1, 8, X);

0x28 R_MSR
:   movq    %X, Y(%Z)
:   movq    %X, (%Z)
    ulm_store64(Y, Z, 0, 1, 8, X);

0x80 MRR_R
:   movq    (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_ZERO_EXT, 8, Z);

0x90 R_MRR
:   movq    %X, (%Y, %Z, 2)
    ulm_store64(0, Y, Z, 2, 8, X);

0xA0 MRR_R
:   movq    (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_ZERO_EXT, 8, Z);

0xB0 R_MRR
:   movq    %X, (%Y, %Z, 4)
    ulm_store64(0, Y, Z, 4, 8, X);

0xC0 MRR_R
:   movq    (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_ZERO_EXT, 8, Z);

0xD0 R_MRR
:   movq    %X, (%Y, %Z, 8)
    ulm_store64(0, Y, Z, 8, 8, X);

0x17 MRR_R
:   movsbq  (%X, %Y), %Z
:   movsbq  (%X, %Y, 1), %Z
    ulm_fetch64(0, X, Y, 1, ULM_SIGN_EXT, 1, Z);

0x1F MSR_R
:   movsbq  (%Y), %Z
:   movsbq  X(%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_SIGN_EXT, 1, Z);

0x87 MRR_R
:   movsbq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_SIGN_EXT, 1, Z);

0xA7 MRR_R
:   movsbq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_SIGN_EXT, 1, Z);

0xC7 MRR_R
:   movsbq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_SIGN_EXT, 1, Z);

0x15 MRR_R
:   movslq  (%X, %Y, 1), %Z
:   movslq  (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_SIGN_EXT, 4, Z);

0x1D MSR_R
:   movslq  X(%Y), %Z
:   movslq  (%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_SIGN_EXT, 4, Z);

0x85 MRR_R
:   movslq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_SIGN_EXT, 4, Z);

0xA5 MRR_R
:   movslq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_SIGN_EXT, 4, Z);

0xC5 MRR_R
:   movslq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_SIGN_EXT, 4, Z);

0x16 MRR_R
:   movswq  (%X, %Y, 1), %Z
:   movswq  (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_SIGN_EXT, 2, Z);

0x1E MSR_R
:   movswq  (%Y), %Z
:   movswq  X(%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_SIGN_EXT, 2, Z);

0x86 MRR_R
:   movswq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_SIGN_EXT, 2, Z);

0xA6 MRR_R
:   movswq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_SIGN_EXT, 2, Z);

0xC6 MRR_R
:   movswq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_SIGN_EXT, 2, Z);


0x22 R_MRR
:   movw    %X, (%Y, %Z)
    ulm_store64(0, Y, Z, 1, 2, X);

0x2A R_MSR
:   movw    %X, Y(%Z)
:   movw    %X, (%Z)
    ulm_store64(Y, Z, 0, 1, 2, X);

0x92 R_MRR
:   movw    %X, (%Y, %Z, 2)
    ulm_store64(0, Y, Z, 2, 2, X);

0xB2 R_MRR
:   movw    %X, (%Y, %Z, 4)
    ulm_store64(0, Y, Z, 4, 2, X);

0xD2 R_MRR
:   movw    %X, (%Y, %Z, 8)
    ulm_store64(0, Y, Z, 8, 2, X);

0x13 MRR_R
:   movzbq  (%X, %Y, 1), %Z
:   movzbq  (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_ZERO_EXT, 1, Z);

0x1B MSR_R
:   movzbq  (%Y), %Z
:   movzbq  X(%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_ZERO_EXT, 1, Z);

0x83 MRR_R
:   movzbq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_ZERO_EXT, 1, Z);

0xA3 MRR_R
:   movzbq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_ZERO_EXT, 1, Z);

0xC3 MRR_R
:   movzbq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_ZERO_EXT, 1, Z);

0x11 MRR_R
:   movzlq  (%X, %Y, 1), %Z
:   movzlq  (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_ZERO_EXT, 4, Z);

0x19 MSR_R
:   movzlq  X(%Y), %Z
:   movzlq  (%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_ZERO_EXT, 4, Z);

0x81 MRR_R
:   movzlq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_ZERO_EXT, 4, Z);

0xA1 MRR_R
:   movzlq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_ZERO_EXT, 4, Z);

0xC1 MRR_R
:   movzlq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_ZERO_EXT, 4, Z);

0x12 MRR_R
:   movzwq  (%X, %Y, 1), %Z
:   movzwq  (%X, %Y), %Z
    ulm_fetch64(0, X, Y, 1, ULM_ZERO_EXT, 2, Z);

0x1A MSR_R
:   movzwq  X(%Y), %Z
:   movzwq  (%Y), %Z
    ulm_fetch64(X, Y, 0, 1, ULM_ZERO_EXT, 2, Z);

0x82 MRR_R
:   movzwq  (%X, %Y, 2), %Z
    ulm_fetch64(0, X, Y, 2, ULM_ZERO_EXT, 2, Z);

0xA2 MRR_R
:   movzwq  (%X, %Y, 4), %Z
    ulm_fetch64(0, X, Y, 4, ULM_ZERO_EXT, 2, Z);

0xC2 MRR_R
:   movzwq  (%X, %Y, 8), %Z
    ulm_fetch64(0, X, Y, 8, ULM_ZERO_EXT, 2, Z);

0x32 RRR
:   mulq    %X, %Y, %Z
    ulm_mul128(ulm_regVal(X), ulm_regVal(Y), Z, Z + 1);

0x3A URR
:   mulq    X, %Y, %Z
    ulm_mul128(X, ulm_regVal(Y), Z, Z + 1);

0xFF E
:   nop
    /* nop */;

0x5E RR
:   notq    %X, %Y
    ulm_not64(ulm_regVal(X), Y);

0x50 RRR
:   orq    %X, %Y, %Z
    ulm_or64(ulm_regVal(X), ulm_regVal(Y), Z);

0x61 R
:   putc    %X
    ulm_printChar(ulm_regVal(X));

0x69 R
:   putc    X
    ulm_printChar(X);

0x52 RRR
:   salq    %X, %Y, %Z
:   shlq    %X, %Y, %Z
    ulm_shiftLeft64(ulm_regVal(X), ulm_regVal(Y), Z);

0x5A RRR
:   salq    X, %Y, %Z
:   shlq    X, %Y, %Z
    ulm_shiftLeft64(X, ulm_regVal(Y), Z);

0x54 RRR
:   sarq    %X, %Y, %Z
    ulm_shiftRightSigned64(ulm_regVal(X), ulm_regVal(Y), Z);

0x5C URR
:   sarq    X, %Y, %Z
    ulm_shiftRightSigned64(X, ulm_regVal(Y), Z);

0x5D U16R
:   shldwq  XY, %Z
    ulm_setReg(ulm_regVal(Z) << 16 | XY, Z); 

0x53 RRR
:   shrq    %X, %Y, %Z
    ulm_shiftRightUnsigned64(ulm_regVal(X), ulm_regVal(Y), Z);

0x5B URR
:   shrq    X, %Y, %Z
    ulm_shiftRightUnsigned64(X, ulm_regVal(Y), Z);

0x31 RRR
:   subq    %X, %Y, %Z
    ulm_sub64(ulm_regVal(X), ulm_regVal(Y), Z);

0x39 URR
:   subq    X, %Y, %Z
    ulm_sub64(X, ulm_regVal(Y), Z);

0x02 RRR
:   trap    %X, %Y, %Z
    ulm_trap(X, Y, Z);


